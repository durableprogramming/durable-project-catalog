name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      skip_publish:
        description: 'Skip publishing to crates.io'
        required: false
        type: boolean
        default: true

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true

  build-binaries:
    name: Build ${{ matrix.target }}
    needs: create-release
    if: always() && (needs.create-release.result == 'success' || github.event_name == 'workflow_dispatch')
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: dpc-linux-x86_64
            use_zigbuild: false

          # Linux x86_64 (musl for static linking)
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            artifact_name: dpc-linux-x86_64-musl
            use_zigbuild: true

          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: dpc-linux-aarch64
            use_zigbuild: true

          # Linux ARM64 (musl)
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            artifact_name: dpc-linux-aarch64-musl
            use_zigbuild: true

          # macOS Intel
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: dpc-macos-intel
            use_zigbuild: false

          # macOS Apple Silicon
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: dpc-macos-arm64
            use_zigbuild: false

          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: dpc-windows-x86_64.exe
            use_zigbuild: false

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Zig (for zigbuild)
        if: matrix.use_zigbuild
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.13.0

      - name: Install cargo-zigbuild
        if: matrix.use_zigbuild
        run: cargo install cargo-zigbuild

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary (cargo)
        if: ${{ !matrix.use_zigbuild }}
        run: cargo build --release --target ${{ matrix.target }} -p dprojc-cli

      - name: Build binary (cargo-zigbuild)
        if: matrix.use_zigbuild
        run: cargo zigbuild --release --target ${{ matrix.target }} -p dprojc-cli

      - name: Strip binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          strip target/${{ matrix.target }}/release/dpc || true

      - name: Prepare artifact (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/dpc artifacts/${{ matrix.artifact_name }}
          chmod +x artifacts/${{ matrix.artifact_name }}

      - name: Prepare artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir artifacts
          copy target\${{ matrix.target }}\release\dpc.exe artifacts\${{ matrix.artifact_name }}

      - name: Upload artifact to release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/${{ matrix.artifact_name }}

      - name: Upload artifact for checksums job
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: ./artifacts/${{ matrix.artifact_name }}
          retention-days: 1

  generate-checksums:
    name: Generate Checksums
    needs: [create-release, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate SHA256 checksums
        run: |
          cd artifacts
          find . -type f -name "dpc-*" -exec sha256sum {} \; | sed 's|./binary-[^/]*/||' > ../checksums.txt
          cd ..
          cat checksums.txt

      - name: Upload checksums to release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: ./checksums.txt

  build-deb-packages:
    name: Build Debian Packages
    needs: create-release
    if: always() && (needs.create-release.result == 'success' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Install cross-compilation tools (ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build deb package
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          fi
          cargo deb -p dprojc-cli --target ${{ matrix.target }}

      - name: Find and rename deb package
        id: deb_info
        run: |
          DEB_FILE=$(find target/${{ matrix.target }}/debian -name "*.deb" | head -n 1)
          VERSION=$(echo $DEB_FILE | sed -n 's/.*_\([0-9.]*\)-.*/\1/p')
          ARCH=$(echo ${{ matrix.target }} | cut -d'-' -f1)
          if [ "$ARCH" = "x86_64" ]; then
            ARCH="amd64"
          elif [ "$ARCH" = "aarch64" ]; then
            ARCH="arm64"
          fi
          NEW_NAME="dpc_${VERSION}_${ARCH}.deb"
          mkdir -p artifacts
          cp "$DEB_FILE" "artifacts/$NEW_NAME"
          echo "package_name=$NEW_NAME" >> $GITHUB_OUTPUT
          echo "package_path=artifacts/$NEW_NAME" >> $GITHUB_OUTPUT

      - name: Upload deb to release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.deb_info.outputs.package_path }}

      - name: Upload deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ matrix.target }}
          path: ${{ steps.deb_info.outputs.package_path }}
          retention-days: 7

  build-rpm-packages:
    name: Build RPM Packages
    needs: create-release
    if: always() && (needs.create-release.result == 'success' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cargo-generate-rpm
        run: cargo install cargo-generate-rpm

      - name: Install RPM tools and cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Build binary
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          fi
          cargo build --release --target ${{ matrix.target }} -p dprojc-cli

      - name: Strip binary
        run: strip target/${{ matrix.target }}/release/dpc || true

      - name: Generate RPM package
        run: |
          cargo generate-rpm -p lib/dprojc-cli --target ${{ matrix.target }}

      - name: Find and rename rpm package
        id: rpm_info
        run: |
          RPM_FILE=$(find target/${{ matrix.target }}/generate-rpm -name "*.rpm" | head -n 1)
          VERSION=$(rpm -qp --queryformat '%{VERSION}' "$RPM_FILE")
          ARCH=$(echo ${{ matrix.target }} | cut -d'-' -f1)
          NEW_NAME="dpc-${VERSION}-1.${ARCH}.rpm"
          mkdir -p artifacts
          cp "$RPM_FILE" "artifacts/$NEW_NAME"
          echo "package_name=$NEW_NAME" >> $GITHUB_OUTPUT
          echo "package_path=artifacts/$NEW_NAME" >> $GITHUB_OUTPUT

      - name: Upload rpm to release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.rpm_info.outputs.package_path }}

      - name: Upload rpm artifact
        uses: actions/upload-artifact@v4
        with:
          name: rpm-${{ matrix.target }}
          path: ${{ steps.rpm_info.outputs.package_path }}
          retention-days: 7

  publish-crates:
    name: Publish to crates.io
    needs: [build-binaries]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && github.event.inputs.skip_publish != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Publish in dependency order
          cargo publish -p dprojc-types --token ${CARGO_REGISTRY_TOKEN} || true
          sleep 10
          cargo publish -p dprojc-utils --token ${CARGO_REGISTRY_TOKEN} || true
          sleep 10
          cargo publish -p dprojc-scanner --token ${CARGO_REGISTRY_TOKEN} || true
          sleep 10
          cargo publish -p dprojc-config --token ${CARGO_REGISTRY_TOKEN} || true
          sleep 10
          cargo publish -p dprojc-db --token ${CARGO_REGISTRY_TOKEN} || true
          sleep 10
          cargo publish -p dprojc-core --token ${CARGO_REGISTRY_TOKEN} || true
          sleep 10
          cargo publish -p dprojc-docs --token ${CARGO_REGISTRY_TOKEN} || true
          sleep 10
          cargo publish -p dprojc-shell --token ${CARGO_REGISTRY_TOKEN} || true
          sleep 10
          cargo publish -p dprojc-tui --token ${CARGO_REGISTRY_TOKEN} || true
          sleep 10
          cargo publish -p dprojc-examples --token ${CARGO_REGISTRY_TOKEN} || true
          sleep 10
          cargo publish -p dprojc-cli --token ${CARGO_REGISTRY_TOKEN} || true

  build-docker:
    name: Build and Push Docker Images
    needs: [create-release, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/durable-project-catalog:latest
            ${{ secrets.DOCKER_USERNAME }}/durable-project-catalog:${{ steps.version.outputs.VERSION }}
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
